import os
import yaml
import requests
from datetime import datetime
from pathlib import Path
from .models import (
    SystemConfigModel,
    ResponseModel,
    ResponseErrorModel,
    ResourceModel,
    ResourceAttributesModel,
    routerModel,
    service_models, 
    middleware_models,
    loadBalancerServiceModel
)

class Proximatic:
    """The proximatic core engine."""

    def __init__(self, yml_path: str = None, fqdn: str = None):
        """Bootstraps the Proximatic object with fqdn string and path to .yml files."""
        if yml_path:
            yml_path = yml_path
        elif os.getenv("PROXIMATIC_YML_PATH"):
            yml_path = os.getenv("PROXIMATIC_YML_PATH")
        else:
            yml_path = "./data/yml"
        yml_path = Path(yml_path)
        if yml_path.exists() and yml_path.is_dir():
            if fqdn:
                fqdn = fqdn
            elif os.getenv("PROXIMATIC_FQDN"):
                fqdn = os.getenv("PROXIMATIC_FQDN")
            else:
                fqdn = "localhost"
            self.config = SystemConfigModel(yml_path=yml_path, fqdn=fqdn)
            self.ingest()
        else:
            raise Exception()

    def set_fqdn(self, fqdn: str):
        self.config.fqdn = fqdn
        # @todo Decide if this should also rewrite the fqdn in all yml?

    def get_fqdn(self):
        return self.config.fqdn

    def create(self, id: str, server: str) -> ResponseModel:
        response = ResponseModel()
        router = routerModel(
            rule=f"Host(`{id}.{self.config.fqdn}`)",
            service=id,
            middlewares=["proximatic-headers"],
        )
        service = loadBalancerServiceModel(servers=[{"url": server}])
        provider = ProviderAttributesModel(
            routers={id: router}, services={id: {"loadBalancer": service}}
        )
        resource = ResourceModel(id=id, type="provider", attributes=provider)
        self.export_yml()
        self.ingest()
        return response

    def export_yml(self) -> ResponseModel:
        file_path = self.config.yml_path.joinpath(
            f"proximatic.config.provider.file.yml"
        )
        with open(file_path, "wt") as yml_stream:
            yml_stream.write(
                f"# Generated by Proximatic()\n# {datetime.now()}\n\n# Dynamic configuration\n\n"
            )
            yaml.dump(self.config.provider.dict(exclude_none=True), yml_stream)
        return ResponseModel()

    def ingest(self) -> SystemConfigModel:
        """ETL function that reads all configuration in yml_path and loads resources into Proximatic()."""

        files = self.config.yml_path.glob("**/*.yml")
        for filename in files:
            with open(filename, "r") as yml_stream:
                config = yaml.safe_load(yml_stream)
                if "http" in config:
                    if "routers" in config["http"]:
                        for router_id, options in config["http"]["routers"].items():
                            router = routerModel(**options)
                            self.config.provider.http["routers"][router_id] = router
                    if "middlewares" in config["http"]:
                        for middleware_id, options in config["http"]["middlewares"].items():
                            middleware_name = next(iter(options))
                            middleware = middleware_models[middleware_name](
                                **options[middleware_name]
                            )
                            self.config.provider.http["middlewares"][middleware_id] = {
                                middleware_name: middleware
                            }
                    if "services" in config["http"]:
                        for service_id, options in config["http"]["services"].items():
                            service_name = next(iter(options))
                            service = service_models[service_name](
                                **options[service_name]
                            )
                            self.config.provider.http["services"][service_id] = {
                                service_name: service
                            }


    def show(self, type: str=None) -> ResponseModel:
        response = ResponseModel(
            data=[]
        )
        for router, options in self.config.provider.http['routers'].items():
            attributes = ResourceAttributesModel(
                router_rule=options.rule, # .split("`")[1],
                service_url=self.config.provider.http['services'][options.service]['loadBalancer'].servers[0]['url'],
                middlewares=options.middlewares
            )
            resource = ResourceModel(
                type="resource",
                id=router,
                attributes=attributes
            )
            response.data.append(resource)
        return response